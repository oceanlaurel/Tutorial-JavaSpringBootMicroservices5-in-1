1)
> watch -n 0.1 curl "http://google.com"

2)
Reference only:
2.1)
If you are using Docker-for-mac or Docker-for-Windows 18.03+, just connect to your mysql service using the host host.docker.internal (instead of the 127.0.0.1 in your connection string).
2.2)
If you are using Docker-for-Linux 20.10.0+, you can also use the host host.docker.internal if you started your Docker container with the --add-host host.docker.internal:host-gateway option.
2.3) - seem not work
> sudo docker run --add-host host.docker.internal:host-gateway in28min/todo-rest-api-h2:1.0.0.RELEASE
2.4) - tested workable
> sudo docker run --network="host" in28min/todo-rest-api-h2:1.0.0.RELEASE
2.5) - tested workable
> sudo docker run -p 5000:5000 in28min/todo-rest-api-h2:1.0.0.RELEASE

3)
Run in detached mode:
> sudo docker run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
> sudo docker run -p 5001:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE

will got the ID of the container, such as: ef5c4702aee9f957542592025b904c82a6a2248d0ae7ef461bf3212a9c0a0f18

4)Example command to view the log:
> sudo docker logs ef5c4702aee9f957542592025b904c82a6a2248d0ae7ef461bf3212a9c0a0f18

5)Example command to view the log and tail:
> sudo docker logs -f ef5c4702aee9f957542592025b904c82a6a2248d0ae7ef461bf3212a9c0a0f18

6) Command for listing out all the existing containers:
> sudo docker container ls

7) Example command to stop a container:
> sudo docker container stop ef5c47

8) Creat new tag for a particular image; so that image have one more new tag:
> sudo docker tag in28min/todo-rest-api-h2:1.0.0.RELEASE in28min/todo-rest-api-h2:latest
OR
> sudo docker tag c2c2eba5ae85 mysql/202210 
(where c2c2eba5ae85 is the image ID)

9) If pull a docker image without specifying a version; then docker will pull down the tagged "latest" version.
> sudo docker pull mysql

10) Search the existing images contain specific keyword on docker hub, for example "mysql", if there exists:
> sudo docker search mysq
(the item with "[OK]" is docker official images)
another example:
> sudo docker search "solace server"

11) To list of update history of the image:
> sudo docker image history 9d05dd98f4a4
(where 9d05dd98f4a4 is the image ID)

12) To list out the metadata of specific image (in JSON format)
> sudo docker image imspect 9d05dd98f4a4 

13) To remove a docke image:
> sudo docker image remove a3a2968869cf
(where a3a2968869cf is the image ID)

14) Launch image with docker container example:
> sudo docker container run -p 5001:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE

15) To pause a container:
> sudo docker container pause 72693
(where 72693 is part of the container ID: 72693e3c9c80bdfdef4fb16371669c2a7fda1298bb48b2c58c498b35000f422e)

16) To follow the logs of this container:
> sudo docker logs -f 72693e3c9
OR
> sudo docker container logs -f 72693e3c9
(where 72693e3c9 is part of the container ID: 72693e3c9c80bdfdef4fb16371669c2a7fda1298bb48b2c58c498b35000f422e)

17) To pause a container:
> sudo docker container unpause 72693
(where 72693 is part of the container ID: 72693e3c9c80bdfdef4fb16371669c2a7fda1298bb48b2c58c498b35000f422e)

18) To inspect a container:
> sudo docker container inspect 72693

19) List out the container id, image, command, created, status of all images and corresponding container: 
> sudo docker container ls -a

20) To remove all stopper containers: 
> sudo docker container prune

21) To stop a container (graceful shutdown):
> sudo docker container stop 72693e

23) To stop a container (sigkill) (kill immediately):
> sudo docker container kill f26a8

24) Auto restart container once docker launched/restarted:
> sudo docker run -p 5000:5000 -d --restart=always in28min/todo-rest-api-h2:0.0.1-SNAPSHOT 
(Defualt value of --restart is no (--restart=no))

25) To restart a docker:
>sudo docker restart -t 10
(where "-t 10" is seconds to wait for stop before killing the container)

26) To view the current docker activity by printing the logs:  
> sudo docker events

27) To view which process(es) is/are running within the container:
> sudo docker top 50bf4
(where 50bf4 is part of the container ID: 50bf40f732e7)

28) Showing the statistic of the current running container(s)
> sudo docker stats

29) To launch contain with limited memory and CPU usage limit:
> sudo docker run -p 5001:5000 -m 512m --cpu-quota 5000 -d --restart=always in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
(
i) -m 512m <-- limit this container can only use 512m ram in max.

ii) --cpu-quota 5000 <-- limit this container can only use 5% of CPU processing in max.
(where 100000 = 100% and 5000 = 5%)
)

30) To list out the different things that your docker daemon manages:
> sudo docker system df


31) Download zipkin:
> curl -sSL https://zipkin.io/quickstart.sh | bash -s

32) Run zipkin locally:
> java -jar zipkin.jar

33) Start Zipkin via Docker: 
> sudo docker run -p 9411:9411 openzipkin/zipkin

34) Build as docker image:
Eclipse -> Run as -> Maven build... -> "Goals:" "spring-boot:build-image -DskipTests" 
or "spring-boot:build-image"
34.1) Prerequisite:
a) To make docker need not using sudo command to control anymore:
> sudo chmod o+w /var/run/docker.sock 

35) Compose is a tool for defining and running multi-container Docker applications. 
With Compose, you use a YAML file to configure your application's services.
> sudo docker-compose version

36) To prepare and run container with multi-images through docker compose:
36.1) Prepare your "docker-compose.yaml" configuration file.
36.2) Browse to the folder with that docker-compose.yaml" configuration file.
36.3) > sudo docker-compose up

37) AWS EKS tutorial
https://www.youtube.com/watch?v=SsUnPWp5ilc

38) Setup kubectl 
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

39) Google Kubernetes Service, example:
> gcloud container clusters get-credentials in28minutes-cluster --region europe-west2 --project teak-formula-371715
(This command would be generated at "Kubernetes Engine"."Cluster"."Connect", no need to remember this Google command) 

39.1) Check kubectl version
> kubectl version

39.2) deploy image, example
> kubectl create deployment hello-world-rest-api --image=in28min/hello-world-rest-api:0.0.1.RELEASE

39.3) Expose deployment to the outside world to make it able to be access outside Google Gloud at port 8080
> kubectl expose deployment hello-world-rest-api --type=LoadBalancer --port=8080

39.4) show the current events:
> kubectl get events
39.4.1) in case if showin "No resources found in default namespace." response, then try: 
>> kubectl get events -w
39.4.2) in case if showin "No resources found in default namespace." response, then try: 
>> kubectl get events -n kube-system
39.4.3) Get sorted events example:
>> kubectl get events --sort-by=.metadata.creationTimestamp


40) Get the information of Pods
>> kubectl get pod
>> kubectl get pods
40.1) get more information of Pod:
>> kubectl get pods -o wide
40.2) get ex[plaon Pods (more details):
>> kubectl explain pods <fields> <Option>

41) Get the information of replica set:
>> kubectl get replicaset
>> kubectl get replicasets
>> kubectl get rs
>> kubectl explain replicaset

42) Get the information of deployment:
kubectl get deployment

43) Get the information of service:
>> kubectl get service
>> kubectl get services
>> kubectl get services -o wide

44) Descript the details of specific pod
>> kubectl describe pod hello-world-rest-api-bdb569b5-9gdnb

45) Delete a pod:
>> kubectl delete pods hello-world-rest-api-bdb569b5-9gdnb
>> kubectl delete pod hello-world-rest-api-86695bcbb4-r4sld

46) Scale deployment to have 3 replicas:
>> kubectl scale deployment hello-world-rest-api --replicas=3

47) Get component status:
>> kubectl get componentstatus
>> kubectl get componentstatus -o wid

48) Setup GCloud SDK on Linux:
48.1) After share to setup GCloub SDK:
>> https://cloud.google.com/sdk/docs/install#deb
48.2) Run the following command to init GCloud
>> exec -l $SHELL
>> gcloud init
48.3) This is the useful reference about how to use GCloud engine:
>> https://cloud.google.com/sdk/auth_success

49) Check gcloud version:
>> gcloud --version

50) login gcloud with google account
>> sudo gcloud auth login

51) Set gcloud project 
>> cloud config set project [PROJECT_ID]
(where tje [PROJECT_ID] cam be found in Google Cloud

52) Check kubectl client verion:
>> kubectl version --client
52.1) For more detail about the version:
>> kubectl version --client --output=yaml   

53) A plugin for Kubernetes command-line tool kubectl, 
which allows you to convert manifests between different API versions. 
This can be particularly helpful 
to migrate manifests to a non-deprecated api version with newer Kubernetes release. 
For more info, 
visit migrate to non deprecated apisA plugin for Kubernetes command-line tool kubectl, 
which allows you to convert manifests between different API versions. 
This can be particularly helpful to migrate manifests 
to a non-deprecated api version with newer Kubernetes release. 
For more info, visit migrate to non deprecated apis

53.1) check kubectl convert version:
>> kubectl convert --help

54) Reference for setup kubectl on your machine:
https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/
https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/


55) Setup gcloud gke-gcloud-auth-plugin
>> gcloud components install gke-gcloud-auth-plugin
>> export USE_GKE_GCLOUD_AUTH_PLUGIN=True

56) Get the credentials to connect to your cluster:
>> gcloud container clusters get-credentials in28minutes-cluster --region europe-west2
(Ref: gcloud container clusters get-credentials <YOUR_CLUSTER> --region <YOUR_REGION>)

56.1) Command-line access: 
>> gcloud container clusters get-credentials in28minutes-cluster --region europe-west2 --project teak-formula-371715

56.2) (Windows only) to set the right to trun the ps1 script with PowerShell: 
>> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted

57) To create and docker hub account if you do not have:
URL: https://hub.docker.com/

58) To login into docker hub:
> docker login
then answer your docker hub id and password.
58.1) I case you got the follow error:
"Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/auth": dial unix /var/run/docker.sock: connect: permission denied
"
58.1.1) then run the following command:
> sudo chmod 666 /var/run/docker.sock
58.1.2) and try to login again:
> docker login
58.1.3) the credential will be store within the follow file and no need to input login ID and password in next login:
> /home/lawrence/.docker/config.json

59) Build and push your image into docker hub after built example:
59.1) set the image name begin with your docker hub name, such as "jkllucas/"
...
<configuration>
	<image>
		<name>jkllucas/mmv2-${project.artifactId}:${project.version}</name>
	</image>
	<pullPolicy>IF_NOT_PRESENT</pullPolicy>
</configuration>			
...
59.2) Push your image to your docker hub example:
> docker push jkllucas/mmv2-currency-exchange-service-kubernetes:0.0.11-SNAPSHOT
> docker push jkllucas/mmv2-currency-conversion-service-kubernetes:0.0.11-SNAPSHOT






